// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TaskTracker.Infrastructure.Persistence.Context;

#nullable disable

namespace TaskTracker.Infrastructure.Persistence.Context.Migrations
{
    [DbContext(typeof(TaskTrackerDbContext))]
    partial class TaskTrackerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TaskTracker.Domain.Models.Tasks.WorkTask", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Assignee")
                        .HasColumnType("text");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ParentTaskId")
                        .HasColumnType("uuid");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ParentTaskId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("TaskTracker.Domain.Models.Tasks.WorkTaskRelation", b =>
                {
                    b.Property<Guid>("WorkTaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RelatedWorkTaskId")
                        .HasColumnType("uuid");

                    b.HasKey("WorkTaskId", "RelatedWorkTaskId");

                    b.HasIndex("RelatedWorkTaskId");

                    b.ToTable("TaskRelations");
                });

            modelBuilder.Entity("TaskTracker.Domain.Models.Tasks.WorkTask", b =>
                {
                    b.HasOne("TaskTracker.Domain.Models.Tasks.WorkTask", "ParentWorkTask")
                        .WithMany()
                        .HasForeignKey("ParentTaskId");

                    b.Navigation("ParentWorkTask");
                });

            modelBuilder.Entity("TaskTracker.Domain.Models.Tasks.WorkTaskRelation", b =>
                {
                    b.HasOne("TaskTracker.Domain.Models.Tasks.WorkTask", "RelatedWorkTask")
                        .WithMany("RelatedFrom")
                        .HasForeignKey("RelatedWorkTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TaskTracker.Domain.Models.Tasks.WorkTask", "WorkTask")
                        .WithMany("RelatedTo")
                        .HasForeignKey("WorkTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RelatedWorkTask");

                    b.Navigation("WorkTask");
                });

            modelBuilder.Entity("TaskTracker.Domain.Models.Tasks.WorkTask", b =>
                {
                    b.Navigation("RelatedFrom");

                    b.Navigation("RelatedTo");
                });
#pragma warning restore 612, 618
        }
    }
}
